# Coin in the Web

# 리액트란?

## React

사용자와 프로그램이 서로 상호작용을 하기 위해 중간에서 상호간의 입력과 출력을 제어해주는 역할을 하는 UI를 만들기 위해 사용되는 기능들의 모음집이다

## SPA(single page application)

SPA란 한 개의 페이지만 존재하는 웹사이트라는 뜻을 가진다. 규모가 큰 웹사이트의 경우에는 많은 수의 페이지를 가지고 있는데 모든 페이지를 각각 html 문서를 작성해 주는 것 보다는 하나의 틀을 만들고 사용자의 요청에 따라 그때 그때마다 내용을 채워 넣는 것을 SPA라고 한다. 페이지 간의 이동에 있어서 새로고침이 필요하지 않고 데이터만 받아오면 되기에 전환이 매끄럽고 빠르다. 그러나 보안과 관련하여 문제가 있고 처음 한번의 로딩에 틀이 되는 파일을 한번에 받기 때문에 초기 구동 속도가 느리다는 단점이 있다.

## MPA(multiple page application)

SPA와는 다르게 여러 개의 페이지로 구성된 웹사이트를 말한다. MPA는 SSR(Server Side Application) 방식으로 렌더링 되는데 이는 서버에서 메인 페이지를 요청하면, 완성된 html을 응답하는 방식이다. SEO( search engine optimization: 웹사이트가 검색결과에 더 잘 보이도록 하는 과정)의 관점에서 SPA에 비해 유리하다는 장점이 있다. 또한 첫 로딩이 매우 짧은데 이는 서버에서 이미 렌더링한 페이지를 가져오기 때문이다. 그러나 페이지의 이동시 새로 고침이 발생하고 서버에 렌더링을 맡기기 때문에 서버에 부담이 간다. 이 외에도 모바일에서는 추가적인 백엔드 작업이 요구되어 개발적인 측면에서 복잡하다

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bb387dc2-6c5b-4a49-8e94-3b192be33134/Untitled.png)

## CSR(Client Side Rendering)

SPA 형식에서 사용되는 데이터의 전송 방식으로 첫 요청 시 static한 파일들을 받아 빈 html을 생성한 뒤 이후에 데이터를 받아오는 방식이다.

[SPA, MPA, CSR, SSR 이란?](https://velog.io/@junghyunhao/SPA-MPA-CSR-SSR-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7b9099f5-2ab0-402f-b1a6-6c636d9e6776/Untitled.png)

## JSX 코드란?(a syntax extension to JavaScript)

JSX는 js의 확장된 문법이라 보면 된다. 

```jsx
const element = <h1>Hello, world!</h1>;
```

위의 코드를 보면 자바 스크립트의 코드이지만 대입 연산자(=) 이후에 h1이라는 html 태그가 등장한다. 이는 html과 js가 결합된 JSX코드이다.사실 리액트에서 JSX의 사용이 필수적인것은 아니다. createElement라는 리액트의 함수를 이용하여 모든 요소를 만드는 것도 가능하지만 하나의 파일에 자바스크립트와 html을 동시에 작성한다는 점은 편리하기 때문에 사용한다.

```jsx
 React.createElement사용법
React.createElement(
type,
[props],
[...children]
)
JSX 사용함
<div>Hello, {name}</div>

JSX 사용 안함
React.createElement('div', null, `hello,${name}`);
```

어지간하면 사용하는게 좋아보일듯 하다…

### JSX의 장점

위에서 나온 코드가 간결하다는 장점에서 오는 가독성, 유지보수의 관점 외에도 JSX는 장점을 가진다. 바로 **Injection Attacks**이라는 방식의 해킹을 방어한다는 것이다 . 인젝션 어택이란 입력창에 문자나 숫자같이 일반적인 값이 아닌 신뢰할 수 없는 소스코드를 주입하도록 하는 공격인데 이를 통해 프로그램의 실행 과정의 변경을 유도하여 결과값을 다르게 나오도록 하는 등의 악용을 가진다. JSX에서는 괄호( {} )를 이용하여 변수를 삽입, 임베딩하고 이를 문자열로 변환하여 코드를 실행하기 때문에 보안에 안전하다. ~~해킹해보고 싶다…~~

### JSX 문법

JSX는 자바 스크립트의 문법에서 xml과 html이 결합된 방식이다.  html, xml, js를 한번에 사용하는 것이 가능한데 대신에 html코드를 작성하다가 html 작성구간 내에서 JS의 코드를 작성해야 하는 구간이 있다면 {}를 통해 묶어준다. 

```jsx
const name = '달타냥냥펀치';
const element = <h1>안녕, {name}</h1>;
```

예를 들자면 다음 코드에서 <h1>태그 안에서의 {name}과 같이 말이다.또한 태그에 attribute(속성)을 넣고 싶을 때는 

큰따옴표 사이에 문자열을 넣거나 

```jsx
const element = <div tabIndex="0"></div>
```

중괄호 사이에 자바 스크립트 코드를 넣어준다.

```jsx
const element = <img src={user.avatarUrl}></img>
```

또한 컴포넌트 내부는 하나의 DOM트리 구조로 이루어져야 한다는 규칙이 있어서 반드시 부모 요소 하나가 감싸야 하는 형태여야 한다. 이는 가상 DOM에서 컴포넌트의 변화를 감지할 때 비교를 더 효율적으로 하기 위함이라 한다.

[[React] 2. JSX란? (정의, 장점, 문법)](https://goddaehee.tistory.com/296)

[JSX 소개 - React](https://reactjs-kr.firebaseapp.com/docs/introducing-jsx.html)

## 리액트의 Element(요소)

리액트에도 element가 있다. 리액트에서의 element와 DOM에서의 element가 굳이 분리되어 있는 이유를 알기 위해선 우선 virtual DOM에 대해서 알아야 한다.

![돔트리.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/32cab26e-4f23-40a8-a13a-124a150a5e68/%EB%8F%94%ED%8A%B8%EB%A6%AC.png)

다음은 DOM트리를 이용한 브라우저 렌더링(파일의 요소들을 화면에 나타내주는 작업)의 과정을 나타낸 그림이다. 이를 렌더 트리라 하는데 이를 기준으로 색을 칠하거나 레이아웃의 배치등의 작업이 이루어 진다. 문제는 프로그래밍에 의해 DOM이 변경되어서 구성요소의 변화가 생기는 상황에 있는데 수정할 상황이 생길 때마다 수정을 하면 렌더링을 너무 여러번 하게 된다. 이는 자원적으로 효율적이지 못하다. **이 때문에 변경 사항을 직접 수정하는 것이 아니라 가상 DOM을 만들어서 이를 수정하고 진짜 DOM에게 여러개의 수정사항을 한번에 전달하여 렌더링에 들어가는 부담을 줄인 것이다.** 

![Screenshot_20220720-134256_YouTube.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bb22434b-52c2-47fa-a988-26d21acb0c6f/Screenshot_20220720-134256_YouTube.jpg)

깃허브를 사용했을 때 겪었던 upstream에 수정한 코드가 하나 있을 때마다 올리는게 아니라 중간에 나의 origin을 만들어 놓고 모아두었다가 한번에 올리는 것과 비슷한 상황이라 생각한다. 

## 리액트의 Component

![컴포넌트.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8807799a-f6fb-4cdb-96d9-ad4897b7c13b/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8.png)

리액트에서의 컴포넌트란 독립적으로 사용 가능한 모듈을 의미한다. 또한 여러개의 컴포넌트들이 모여 또다른 컴포넌트를 구성할 수도 있다. 이를 통해 작은 컴포넌트들이 모여서 결국 전체 페이지를 구성하게 된다. 컴포넌트가 재사용됨에 따라 코드의 양이 줄어들고 덕분에 개발 시간과 유지보수 난이도가 줄어든다는 장점이 있다. 

### 리액트 컴포넌트의 입력과 출력

![컴포넌트의 입력과 출력.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/22393a60-92c7-45a1-bcde-915060c47c0a/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98_%EC%9E%85%EB%A0%A5%EA%B3%BC_%EC%B6%9C%EB%A0%A5.png)

리액트 컴포넌트는 Props(속성)라는 데이터 값을 입력받아서 리액트 엘리먼트를 출력한다. 

![컴포넌트 붕어빵.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2cc71f2c-acbe-4586-a24c-08224235b7ec/%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8_%EB%B6%95%EC%96%B4%EB%B9%B5.png)

이해를 돕기 위해 그려진 다음 그림을 참고해 보자면 컴포넌트는 props를 받아 리액트 element를 만드는 틀인 셈이다.

### Props

=property(재산, 속성)

props는 컴포넌트에 전달할 다양한 정보를 담고 있는 자바스크립트의 객체이다. 

props의 특징으로는 변경이 불가능하다는 점이 있다. 컴포넌트에 전달되어 엘리먼트로 출력되고 있는 props는 변경이 불가능 하다는 말이다. 만약 값을 바꾸고 싶다면 다른 props를 새로 component에 전달하여 엘리먼트를 만들어야 한다.